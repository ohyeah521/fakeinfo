// This file was generated by PermissionsDispatcher. Do not modify!
package com.sch.fakecontacts.ui.activities;

import android.support.v4.app.ActivityCompat;
import java.lang.String;
import permissions.dispatcher.PermissionUtils;

final class MainActivityPermissionsDispatcher {
  private static final int REQUEST_SELECTGROUP = 0;

  private static final String[] PERMISSION_SELECTGROUP = new String[] {"android.permission.READ_CONTACTS"};

  private static final int REQUEST_GENERATECONTACTS = 1;

  private static final String[] PERMISSION_GENERATECONTACTS = new String[] {"android.permission.WRITE_CONTACTS"};

  private static final int REQUEST_DELETEGENERATEDCONTACTS = 2;

  private static final String[] PERMISSION_DELETEGENERATEDCONTACTS = new String[] {"android.permission.WRITE_CONTACTS"};

  private MainActivityPermissionsDispatcher() {
  }

  static void selectGroupWithCheck(MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SELECTGROUP)) {
      target.selectGroup();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_SELECTGROUP, REQUEST_SELECTGROUP);
    }
  }

  static void generateContactsWithCheck(MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GENERATECONTACTS)) {
      target.generateContacts();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GENERATECONTACTS, REQUEST_GENERATECONTACTS);
    }
  }

  static void deleteGeneratedContactsWithCheck(MainActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_DELETEGENERATEDCONTACTS)) {
      target.deleteGeneratedContacts();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_DELETEGENERATEDCONTACTS, REQUEST_DELETEGENERATEDCONTACTS);
    }
  }

  static void onRequestPermissionsResult(MainActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_SELECTGROUP:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_SELECTGROUP)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.selectGroup();
      }
      break;
      case REQUEST_GENERATECONTACTS:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_GENERATECONTACTS)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.generateContacts();
      }
      break;
      case REQUEST_DELETEGENERATEDCONTACTS:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_DELETEGENERATEDCONTACTS)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.deleteGeneratedContacts();
      }
      break;
      default:
      break;
    }
  }
}
